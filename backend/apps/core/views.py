from django.shortcuts import render

from rest_framework import viewsets, status
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import Technology, ProjectTemplate
from .serializers import TechnologySerializer, ProjectTemplateSerializer
import os
import shutil 
from django.conf import settings

class TechnologyViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Technology.objects.all().order_by('name')
    serializer_class = TechnologySerializer

class ProjectTemplateViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = ProjectTemplate.objects.all().order_by('name')
    serializer_class = ProjectTemplateSerializer

class ProjectGenerateAPIView(APIView):
    def post(self, request, *args, **kwargs):
        project_template_id = request.data.get('project_template_id')
        project_name = request.data.get('project_name', 'my_codekit_project')

        if not project_template_id:
            return Response({'error': 'Project template ID is required'}, status=status.HTTP_400_BAD_REQUEST)
        try:
            project_template = ProjectTemplate.objects.get(id=project_template_id)
        except ProjectTemplate.DoesNotExist:
            return Response({'error': 'Project template not found'}, status=status.HTTP_404_NOT_FOUND)
        
        generated_projects_dir = settings.BASE_DIR / 'generated_projects'
        if not generated_projects_dir.exists():
            generated_projects_dir.mkdir()

        project_path = generated_projects_dir / project_name

        if project_path.exists():
            return Response({"error": f"Project directory '{project_name}' already exists. Please choose a different name or remove the existing one."}, status=status.HTTP_409_CONFLICT)
        
        try:
            os.mkdir(project_path)

            readme_content = f"# {project_name}\n\n"
            readme_content += "This project was generated by Codekit.\n\n"

            if project_template.backend_technology:
                readme_content += f"**Backend:** {project_template.backend_technology.name}\n"
            if project_template.frontend_technology:
                readme_content += f"**Frontend:** {project_template.frontend_technology.name}\n"

            with open(os.path.join(project_path, 'README.md'), 'w') as f:
                f.write(readme_content)

            return Response(
                {"message": f"Project '{project_name}' generated successfully at {project_path}", "project_path": str(project_path)},
                status=status.HTTP_200_OK
            )
        except Exception as e:
            if project_path.exists():
                shutil.rmtree(project_path)
            return Response(
                {"error": f"Failed to generate project: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
